-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_resource_ap_fixed_9_4_0_0_0_ap_fixed_9_4_5_3_0_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of myproject_dense_resource_ap_fixed_9_4_0_0_0_ap_fixed_9_4_5_3_0_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln42_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w15_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w15_V_ce0 : STD_LOGIC;
    signal w15_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w15_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal w15_V_ce1 : STD_LOGIC;
    signal w15_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal do_init_reg_157 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index9_reg_173 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read12_rewind_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read113_rewind_reg_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read214_rewind_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read315_rewind_reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read416_rewind_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read517_rewind_reg_258 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read618_rewind_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read719_rewind_reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read820_rewind_reg_300 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read921_rewind_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_010_reg_328 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_do_init_phi_fu_161_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_fu_500_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_index_reg_668 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln42_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln813_1_fu_598_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_in_index9_phi_fu_177_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_read12_phi_phi_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read113_phi_phi_fu_358_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read214_phi_phi_fu_370_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read315_phi_phi_fu_382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read416_phi_phi_fu_394_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read517_phi_phi_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read618_phi_phi_fu_418_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read719_phi_phi_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read820_phi_phi_fu_442_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_read921_phi_phi_fu_454_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read12_phi_reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read12_phi_reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read113_phi_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read113_phi_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read214_phi_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read214_phi_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read315_phi_reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read315_phi_reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read416_phi_reg_390 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read416_phi_reg_390 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read517_phi_reg_402 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read517_phi_reg_402 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read618_phi_reg_414 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read618_phi_reg_414 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read719_phi_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read719_phi_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read820_phi_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read820_phi_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_read921_phi_reg_450 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_read921_phi_reg_450 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_467_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_475_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_34_fu_479_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_485_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_512_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1270_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1270_fu_536_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_552_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1270_1_fu_576_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1270_1_fu_576_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln818_1_fu_582_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_fu_542_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln813_fu_592_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1270_1_fu_576_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1270_fu_536_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_165 : BOOLEAN;
    signal ap_condition_42 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mux_53_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component myproject_mul_8s_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_dense_resource_ap_fixed_9_4_0_0_0_ap_fixed_9_4_5_3_0_config15_s_w15_V_ROM_AUTdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    w15_V_U : component myproject_dense_resource_ap_fixed_9_4_0_0_0_ap_fixed_9_4_5_3_0_config15_s_w15_V_ROM_AUTdEe
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w15_V_address0,
        ce0 => w15_V_ce0,
        q0 => w15_V_q0,
        address1 => w15_V_address1,
        ce1 => w15_V_ce1,
        q1 => w15_V_q1);

    mux_53_8_1_1_U1873 : component myproject_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_phi_mux_p_read12_phi_phi_fu_346_p4,
        din1 => ap_phi_mux_p_read113_phi_phi_fu_358_p4,
        din2 => ap_phi_mux_p_read214_phi_phi_fu_370_p4,
        din3 => ap_phi_mux_p_read315_phi_phi_fu_382_p4,
        din4 => ap_phi_mux_p_read416_phi_phi_fu_394_p4,
        din5 => in_index9_reg_173,
        dout => tmp_fu_512_p7);

    mul_8s_8ns_15_1_1_U1874 : component myproject_mul_8s_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => w15_V_q1,
        din1 => mul_ln1270_fu_536_p1,
        dout => mul_ln1270_fu_536_p2);

    mux_53_8_1_1_U1875 : component myproject_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_phi_mux_p_read517_phi_phi_fu_406_p4,
        din1 => ap_phi_mux_p_read618_phi_phi_fu_418_p4,
        din2 => ap_phi_mux_p_read719_phi_phi_fu_430_p4,
        din3 => ap_phi_mux_p_read820_phi_phi_fu_442_p4,
        din4 => ap_phi_mux_p_read921_phi_phi_fu_454_p4,
        din5 => in_index9_reg_173,
        dout => tmp_s_fu_552_p7);

    mul_8s_8ns_15_1_1_U1876 : component myproject_mul_8s_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => w15_V_q0,
        din1 => mul_ln1270_1_fu_576_p1,
        dout => mul_ln1270_1_fu_576_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv9_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1))) then 
                    ap_return_preg <= add_ln813_1_fu_598_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_read113_phi_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read113_phi_reg_354 <= p_read1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read113_phi_reg_354 <= ap_phi_reg_pp0_iter0_p_read113_phi_reg_354;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read12_phi_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read12_phi_reg_342 <= p_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read12_phi_reg_342 <= ap_phi_reg_pp0_iter0_p_read12_phi_reg_342;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read214_phi_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read214_phi_reg_366 <= p_read2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read214_phi_reg_366 <= ap_phi_reg_pp0_iter0_p_read214_phi_reg_366;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read315_phi_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read315_phi_reg_378 <= p_read3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read315_phi_reg_378 <= ap_phi_reg_pp0_iter0_p_read315_phi_reg_378;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read416_phi_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read416_phi_reg_390 <= p_read4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read416_phi_reg_390 <= ap_phi_reg_pp0_iter0_p_read416_phi_reg_390;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read517_phi_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read517_phi_reg_402 <= p_read5;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read517_phi_reg_402 <= ap_phi_reg_pp0_iter0_p_read517_phi_reg_402;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read618_phi_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read618_phi_reg_414 <= p_read6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read618_phi_reg_414 <= ap_phi_reg_pp0_iter0_p_read618_phi_reg_414;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read719_phi_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read719_phi_reg_426 <= p_read7;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read719_phi_reg_426 <= ap_phi_reg_pp0_iter0_p_read719_phi_reg_426;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read820_phi_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read820_phi_reg_438 <= p_read8;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read820_phi_reg_438 <= ap_phi_reg_pp0_iter0_p_read820_phi_reg_438;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_read921_phi_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_161_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_read921_phi_reg_450 <= p_read9;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_read921_phi_reg_450 <= ap_phi_reg_pp0_iter0_p_read921_phi_reg_450;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_0))) then 
                do_init_reg_157 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_157 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    in_index9_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_0))) then 
                in_index9_reg_173 <= in_index_reg_668;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                in_index9_reg_173 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    res_010_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_0))) then 
                res_010_reg_328 <= add_ln813_1_fu_598_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_010_reg_328 <= ap_const_lv9_6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_reg_673 <= icmp_ln42_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_index_reg_668 <= in_index_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_0))) then
                p_read113_rewind_reg_202 <= ap_phi_mux_p_read113_phi_phi_fu_358_p4;
                p_read12_rewind_reg_188 <= ap_phi_mux_p_read12_phi_phi_fu_346_p4;
                p_read214_rewind_reg_216 <= ap_phi_mux_p_read214_phi_phi_fu_370_p4;
                p_read315_rewind_reg_230 <= ap_phi_mux_p_read315_phi_phi_fu_382_p4;
                p_read416_rewind_reg_244 <= ap_phi_mux_p_read416_phi_phi_fu_394_p4;
                p_read517_rewind_reg_258 <= ap_phi_mux_p_read517_phi_phi_fu_406_p4;
                p_read618_rewind_reg_272 <= ap_phi_mux_p_read618_phi_phi_fu_418_p4;
                p_read719_rewind_reg_286 <= ap_phi_mux_p_read719_phi_phi_fu_430_p4;
                p_read820_rewind_reg_300 <= ap_phi_mux_p_read820_phi_phi_fu_442_p4;
                p_read921_rewind_reg_314 <= ap_phi_mux_p_read921_phi_phi_fu_454_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln813_1_fu_598_p2 <= std_logic_vector(unsigned(res_010_reg_328) + unsigned(add_ln813_fu_592_p2));
    add_ln813_fu_592_p2 <= std_logic_vector(unsigned(trunc_ln818_1_fu_582_p4) + unsigned(trunc_ln_fu_542_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_165_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_165 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_42_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_42 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln42_reg_673, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_161_p6_assign_proc : process(do_init_reg_157, icmp_ln42_reg_673, ap_condition_165)
    begin
        if ((ap_const_boolean_1 = ap_condition_165)) then
            if ((icmp_ln42_reg_673 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_161_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln42_reg_673 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_161_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_161_p6 <= do_init_reg_157;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_161_p6 <= do_init_reg_157;
        end if; 
    end process;


    ap_phi_mux_in_index9_phi_fu_177_p6_assign_proc : process(in_index9_reg_173, in_index_reg_668, icmp_ln42_reg_673, ap_condition_165)
    begin
        if ((ap_const_boolean_1 = ap_condition_165)) then
            if ((icmp_ln42_reg_673 = ap_const_lv1_1)) then 
                ap_phi_mux_in_index9_phi_fu_177_p6 <= ap_const_lv3_0;
            elsif ((icmp_ln42_reg_673 = ap_const_lv1_0)) then 
                ap_phi_mux_in_index9_phi_fu_177_p6 <= in_index_reg_668;
            else 
                ap_phi_mux_in_index9_phi_fu_177_p6 <= in_index9_reg_173;
            end if;
        else 
            ap_phi_mux_in_index9_phi_fu_177_p6 <= in_index9_reg_173;
        end if; 
    end process;


    ap_phi_mux_p_read113_phi_phi_fu_358_p4_assign_proc : process(do_init_reg_157, p_read113_rewind_reg_202, ap_phi_reg_pp0_iter1_p_read113_phi_reg_354)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read113_phi_phi_fu_358_p4 <= p_read113_rewind_reg_202;
        else 
            ap_phi_mux_p_read113_phi_phi_fu_358_p4 <= ap_phi_reg_pp0_iter1_p_read113_phi_reg_354;
        end if; 
    end process;


    ap_phi_mux_p_read12_phi_phi_fu_346_p4_assign_proc : process(do_init_reg_157, p_read12_rewind_reg_188, ap_phi_reg_pp0_iter1_p_read12_phi_reg_342)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read12_phi_phi_fu_346_p4 <= p_read12_rewind_reg_188;
        else 
            ap_phi_mux_p_read12_phi_phi_fu_346_p4 <= ap_phi_reg_pp0_iter1_p_read12_phi_reg_342;
        end if; 
    end process;


    ap_phi_mux_p_read214_phi_phi_fu_370_p4_assign_proc : process(do_init_reg_157, p_read214_rewind_reg_216, ap_phi_reg_pp0_iter1_p_read214_phi_reg_366)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read214_phi_phi_fu_370_p4 <= p_read214_rewind_reg_216;
        else 
            ap_phi_mux_p_read214_phi_phi_fu_370_p4 <= ap_phi_reg_pp0_iter1_p_read214_phi_reg_366;
        end if; 
    end process;


    ap_phi_mux_p_read315_phi_phi_fu_382_p4_assign_proc : process(do_init_reg_157, p_read315_rewind_reg_230, ap_phi_reg_pp0_iter1_p_read315_phi_reg_378)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read315_phi_phi_fu_382_p4 <= p_read315_rewind_reg_230;
        else 
            ap_phi_mux_p_read315_phi_phi_fu_382_p4 <= ap_phi_reg_pp0_iter1_p_read315_phi_reg_378;
        end if; 
    end process;


    ap_phi_mux_p_read416_phi_phi_fu_394_p4_assign_proc : process(do_init_reg_157, p_read416_rewind_reg_244, ap_phi_reg_pp0_iter1_p_read416_phi_reg_390)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read416_phi_phi_fu_394_p4 <= p_read416_rewind_reg_244;
        else 
            ap_phi_mux_p_read416_phi_phi_fu_394_p4 <= ap_phi_reg_pp0_iter1_p_read416_phi_reg_390;
        end if; 
    end process;


    ap_phi_mux_p_read517_phi_phi_fu_406_p4_assign_proc : process(do_init_reg_157, p_read517_rewind_reg_258, ap_phi_reg_pp0_iter1_p_read517_phi_reg_402)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read517_phi_phi_fu_406_p4 <= p_read517_rewind_reg_258;
        else 
            ap_phi_mux_p_read517_phi_phi_fu_406_p4 <= ap_phi_reg_pp0_iter1_p_read517_phi_reg_402;
        end if; 
    end process;


    ap_phi_mux_p_read618_phi_phi_fu_418_p4_assign_proc : process(do_init_reg_157, p_read618_rewind_reg_272, ap_phi_reg_pp0_iter1_p_read618_phi_reg_414)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read618_phi_phi_fu_418_p4 <= p_read618_rewind_reg_272;
        else 
            ap_phi_mux_p_read618_phi_phi_fu_418_p4 <= ap_phi_reg_pp0_iter1_p_read618_phi_reg_414;
        end if; 
    end process;


    ap_phi_mux_p_read719_phi_phi_fu_430_p4_assign_proc : process(do_init_reg_157, p_read719_rewind_reg_286, ap_phi_reg_pp0_iter1_p_read719_phi_reg_426)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read719_phi_phi_fu_430_p4 <= p_read719_rewind_reg_286;
        else 
            ap_phi_mux_p_read719_phi_phi_fu_430_p4 <= ap_phi_reg_pp0_iter1_p_read719_phi_reg_426;
        end if; 
    end process;


    ap_phi_mux_p_read820_phi_phi_fu_442_p4_assign_proc : process(do_init_reg_157, p_read820_rewind_reg_300, ap_phi_reg_pp0_iter1_p_read820_phi_reg_438)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read820_phi_phi_fu_442_p4 <= p_read820_rewind_reg_300;
        else 
            ap_phi_mux_p_read820_phi_phi_fu_442_p4 <= ap_phi_reg_pp0_iter1_p_read820_phi_reg_438;
        end if; 
    end process;


    ap_phi_mux_p_read921_phi_phi_fu_454_p4_assign_proc : process(do_init_reg_157, p_read921_rewind_reg_314, ap_phi_reg_pp0_iter1_p_read921_phi_reg_450)
    begin
        if ((do_init_reg_157 = ap_const_lv1_0)) then 
            ap_phi_mux_p_read921_phi_phi_fu_454_p4 <= p_read921_rewind_reg_314;
        else 
            ap_phi_mux_p_read921_phi_phi_fu_454_p4 <= ap_phi_reg_pp0_iter1_p_read921_phi_reg_450;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_read113_phi_reg_354 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read12_phi_reg_342 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read214_phi_reg_366 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read315_phi_reg_378 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read416_phi_reg_390 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read517_phi_reg_402 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read618_phi_reg_414 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read719_phi_reg_426 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read820_phi_reg_438 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_p_read921_phi_reg_450 <= "XXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln42_fu_506_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln42_reg_673, add_ln813_1_fu_598_p2, ap_enable_reg_pp0_iter1, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln42_reg_673 = ap_const_lv1_1))) then 
            ap_return <= add_ln813_1_fu_598_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_34_fu_479_p2 <= std_logic_vector(unsigned(p_cast_fu_475_p1) + unsigned(ap_const_lv5_A));
    icmp_ln42_fu_506_p2 <= "1" when (ap_phi_mux_in_index9_phi_fu_177_p6 = ap_const_lv3_4) else "0";
    in_index_fu_500_p2 <= std_logic_vector(unsigned(ap_phi_mux_in_index9_phi_fu_177_p6) + unsigned(ap_const_lv3_1));
    mul_ln1270_1_fu_576_p1 <= mul_ln1270_1_fu_576_p10(8 - 1 downto 0);
    mul_ln1270_1_fu_576_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_552_p7),15));
    mul_ln1270_fu_536_p1 <= mul_ln1270_fu_536_p10(8 - 1 downto 0);
    mul_ln1270_fu_536_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_512_p7),15));
    p_cast3_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_485_p4),64));
    p_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_467_p3),5));
    tmp_1_fu_467_p3 <= (ap_phi_mux_in_index9_phi_fu_177_p6 & ap_const_lv1_0);
    tmp_2_fu_485_p4 <= empty_34_fu_479_p2(4 downto 1);
    trunc_ln818_1_fu_582_p4 <= mul_ln1270_1_fu_576_p2(14 downto 6);
    trunc_ln_fu_542_p4 <= mul_ln1270_fu_536_p2(14 downto 6);
    w15_V_address0 <= p_cast3_fu_495_p1(4 - 1 downto 0);
    w15_V_address1 <= zext_ln42_fu_462_p1(4 - 1 downto 0);

    w15_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w15_V_ce0 <= ap_const_logic_1;
        else 
            w15_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w15_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w15_V_ce1 <= ap_const_logic_1;
        else 
            w15_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_in_index9_phi_fu_177_p6),64));
end behav;
