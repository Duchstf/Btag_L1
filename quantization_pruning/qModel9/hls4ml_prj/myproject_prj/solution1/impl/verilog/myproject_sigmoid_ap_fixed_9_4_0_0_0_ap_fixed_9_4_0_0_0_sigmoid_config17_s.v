// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_sigmoid_ap_fixed_9_4_0_0_0_ap_fixed_9_4_0_0_0_sigmoid_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        layer17_out,
        layer17_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] p_read;
output  [8:0] layer17_out;
output   layer17_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] layer17_out;
reg layer17_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] sigmoid_table_address0;
reg    sigmoid_table_ce0;
wire   [9:0] sigmoid_table_q0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln121_fu_76_p1;
wire    ap_block_pp0_stage0;
wire   [8:0] zext_ln121_1_fu_113_p1;
reg   [8:0] layer17_out_preg;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] data_round_fu_62_p3;
wire   [9:0] index_fu_70_p2;
wire   [4:0] tmp_fu_81_p4;
wire   [0:0] tmp_1_fu_95_p3;
wire   [5:0] zext_ln823_fu_91_p1;
wire   [5:0] zext_ln377_fu_103_p1;
wire   [5:0] p_Val2_1_fu_107_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 layer17_out_preg = 9'd0;
end

myproject_sigmoid_ap_fixed_9_4_0_0_0_ap_fixed_9_4_0_0_0_sigmoid_config17_s_sigmoid_tableOg #(
    .DataWidth( 10 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sigmoid_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoid_table_address0),
    .ce0(sigmoid_table_ce0),
    .q0(sigmoid_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                layer17_out_preg[0] <= 1'b0;
        layer17_out_preg[1] <= 1'b0;
        layer17_out_preg[2] <= 1'b0;
        layer17_out_preg[3] <= 1'b0;
        layer17_out_preg[4] <= 1'b0;
        layer17_out_preg[5] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        layer17_out_preg[5 : 0] <= zext_ln121_1_fu_113_p1[5 : 0];
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer17_out = zext_ln121_1_fu_113_p1;
    end else begin
        layer17_out = layer17_out_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer17_out_ap_vld = 1'b1;
    end else begin
        layer17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sigmoid_table_ce0 = 1'b1;
    end else begin
        sigmoid_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign data_round_fu_62_p3 = {{p_read}, {1'd0}};

assign index_fu_70_p2 = (data_round_fu_62_p3 ^ 10'd512);

assign p_Val2_1_fu_107_p2 = (zext_ln823_fu_91_p1 + zext_ln377_fu_103_p1);

assign sigmoid_table_address0 = zext_ln121_fu_76_p1;

assign tmp_1_fu_95_p3 = sigmoid_table_q0[32'd4];

assign tmp_fu_81_p4 = {{sigmoid_table_q0[9:5]}};

assign zext_ln121_1_fu_113_p1 = p_Val2_1_fu_107_p2;

assign zext_ln121_fu_76_p1 = index_fu_70_p2;

assign zext_ln377_fu_103_p1 = tmp_1_fu_95_p3;

assign zext_ln823_fu_91_p1 = tmp_fu_81_p4;

always @ (posedge ap_clk) begin
    layer17_out_preg[8:6] <= 3'b000;
end

endmodule //myproject_sigmoid_ap_fixed_9_4_0_0_0_ap_fixed_9_4_0_0_0_sigmoid_config17_s
