// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_relu_ap_fixed_16_6_0_0_0_ap_fixed_9_4_0_0_0_relu_config14_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [12:0] p_read;
input  [12:0] p_read1;
input  [12:0] p_read2;
input  [12:0] p_read3;
input  [12:0] p_read4;
input  [12:0] p_read5;
input  [12:0] p_read6;
input  [12:0] p_read7;
input  [12:0] p_read8;
input  [12:0] p_read9;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [6:0] trunc_ln_fu_116_p4;
wire   [0:0] tmp_fu_130_p3;
wire   [7:0] zext_ln823_fu_126_p1;
wire   [7:0] zext_ln377_fu_138_p1;
wire   [0:0] overflow_fu_148_p3;
wire   [7:0] p_Val2_s_fu_142_p2;
wire   [0:0] icmp_ln1649_fu_110_p2;
wire   [7:0] select_ln346_fu_156_p3;
wire   [6:0] trunc_ln823_1_fu_178_p4;
wire   [0:0] tmp_751_fu_192_p3;
wire   [7:0] zext_ln823_1_fu_188_p1;
wire   [7:0] zext_ln377_249_fu_200_p1;
wire   [0:0] overflow_249_fu_210_p3;
wire   [7:0] p_Val2_500_fu_204_p2;
wire   [0:0] icmp_ln1649_249_fu_172_p2;
wire   [7:0] select_ln346_249_fu_218_p3;
wire   [6:0] trunc_ln823_2_fu_240_p4;
wire   [0:0] tmp_753_fu_254_p3;
wire   [7:0] zext_ln823_2_fu_250_p1;
wire   [7:0] zext_ln377_250_fu_262_p1;
wire   [0:0] overflow_250_fu_272_p3;
wire   [7:0] p_Val2_501_fu_266_p2;
wire   [0:0] icmp_ln1649_250_fu_234_p2;
wire   [7:0] select_ln346_250_fu_280_p3;
wire   [6:0] trunc_ln823_3_fu_302_p4;
wire   [0:0] tmp_755_fu_316_p3;
wire   [7:0] zext_ln823_3_fu_312_p1;
wire   [7:0] zext_ln377_251_fu_324_p1;
wire   [0:0] overflow_251_fu_334_p3;
wire   [7:0] p_Val2_502_fu_328_p2;
wire   [0:0] icmp_ln1649_251_fu_296_p2;
wire   [7:0] select_ln346_251_fu_342_p3;
wire   [6:0] trunc_ln823_4_fu_364_p4;
wire   [0:0] tmp_757_fu_378_p3;
wire   [7:0] zext_ln823_4_fu_374_p1;
wire   [7:0] zext_ln377_252_fu_386_p1;
wire   [0:0] overflow_252_fu_396_p3;
wire   [7:0] p_Val2_503_fu_390_p2;
wire   [0:0] icmp_ln1649_252_fu_358_p2;
wire   [7:0] select_ln346_252_fu_404_p3;
wire   [6:0] trunc_ln823_5_fu_426_p4;
wire   [0:0] tmp_759_fu_440_p3;
wire   [7:0] zext_ln823_5_fu_436_p1;
wire   [7:0] zext_ln377_253_fu_448_p1;
wire   [0:0] overflow_253_fu_458_p3;
wire   [7:0] p_Val2_504_fu_452_p2;
wire   [0:0] icmp_ln1649_253_fu_420_p2;
wire   [7:0] select_ln346_253_fu_466_p3;
wire   [6:0] trunc_ln823_6_fu_488_p4;
wire   [0:0] tmp_761_fu_502_p3;
wire   [7:0] zext_ln823_6_fu_498_p1;
wire   [7:0] zext_ln377_254_fu_510_p1;
wire   [0:0] overflow_254_fu_520_p3;
wire   [7:0] p_Val2_505_fu_514_p2;
wire   [0:0] icmp_ln1649_254_fu_482_p2;
wire   [7:0] select_ln346_254_fu_528_p3;
wire   [6:0] trunc_ln823_7_fu_550_p4;
wire   [0:0] tmp_763_fu_564_p3;
wire   [7:0] zext_ln823_7_fu_560_p1;
wire   [7:0] zext_ln377_255_fu_572_p1;
wire   [0:0] overflow_255_fu_582_p3;
wire   [7:0] p_Val2_506_fu_576_p2;
wire   [0:0] icmp_ln1649_255_fu_544_p2;
wire   [7:0] select_ln346_255_fu_590_p3;
wire   [6:0] trunc_ln823_8_fu_612_p4;
wire   [0:0] tmp_765_fu_626_p3;
wire   [7:0] zext_ln823_8_fu_622_p1;
wire   [7:0] zext_ln377_256_fu_634_p1;
wire   [0:0] overflow_256_fu_644_p3;
wire   [7:0] p_Val2_507_fu_638_p2;
wire   [0:0] icmp_ln1649_256_fu_606_p2;
wire   [7:0] select_ln346_256_fu_652_p3;
wire   [6:0] trunc_ln823_9_fu_674_p4;
wire   [0:0] tmp_767_fu_688_p3;
wire   [7:0] zext_ln823_9_fu_684_p1;
wire   [7:0] zext_ln377_257_fu_696_p1;
wire   [0:0] overflow_257_fu_706_p3;
wire   [7:0] p_Val2_508_fu_700_p2;
wire   [0:0] icmp_ln1649_257_fu_668_p2;
wire   [7:0] select_ln346_257_fu_714_p3;
wire   [7:0] select_ln1649_fu_164_p3;
wire   [7:0] select_ln1649_249_fu_226_p3;
wire   [7:0] select_ln1649_250_fu_288_p3;
wire   [7:0] select_ln1649_251_fu_350_p3;
wire   [7:0] select_ln1649_252_fu_412_p3;
wire   [7:0] select_ln1649_253_fu_474_p3;
wire   [7:0] select_ln1649_254_fu_536_p3;
wire   [7:0] select_ln1649_255_fu_598_p3;
wire   [7:0] select_ln1649_256_fu_660_p3;
wire   [7:0] select_ln1649_257_fu_722_p3;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= select_ln1649_fu_164_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= select_ln1649_249_fu_226_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= select_ln1649_250_fu_288_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= select_ln1649_251_fu_350_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_4_preg <= select_ln1649_252_fu_412_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_5_preg <= select_ln1649_253_fu_474_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_6_preg <= select_ln1649_254_fu_536_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_7_preg <= select_ln1649_255_fu_598_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_8_preg <= select_ln1649_256_fu_660_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_9_preg <= select_ln1649_257_fu_722_p3;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = select_ln1649_fu_164_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = select_ln1649_249_fu_226_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = select_ln1649_250_fu_288_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = select_ln1649_251_fu_350_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = select_ln1649_252_fu_412_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = select_ln1649_253_fu_474_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = select_ln1649_254_fu_536_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = select_ln1649_255_fu_598_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = select_ln1649_256_fu_660_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = select_ln1649_257_fu_722_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln1649_249_fu_172_p2 = (($signed(p_read1) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_250_fu_234_p2 = (($signed(p_read2) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_251_fu_296_p2 = (($signed(p_read3) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_252_fu_358_p2 = (($signed(p_read4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_253_fu_420_p2 = (($signed(p_read5) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_254_fu_482_p2 = (($signed(p_read6) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_255_fu_544_p2 = (($signed(p_read7) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_256_fu_606_p2 = (($signed(p_read8) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_257_fu_668_p2 = (($signed(p_read9) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_110_p2 = (($signed(p_read) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign overflow_249_fu_210_p3 = p_read1[32'd12];

assign overflow_250_fu_272_p3 = p_read2[32'd12];

assign overflow_251_fu_334_p3 = p_read3[32'd12];

assign overflow_252_fu_396_p3 = p_read4[32'd12];

assign overflow_253_fu_458_p3 = p_read5[32'd12];

assign overflow_254_fu_520_p3 = p_read6[32'd12];

assign overflow_255_fu_582_p3 = p_read7[32'd12];

assign overflow_256_fu_644_p3 = p_read8[32'd12];

assign overflow_257_fu_706_p3 = p_read9[32'd12];

assign overflow_fu_148_p3 = p_read[32'd12];

assign p_Val2_500_fu_204_p2 = (zext_ln823_1_fu_188_p1 + zext_ln377_249_fu_200_p1);

assign p_Val2_501_fu_266_p2 = (zext_ln823_2_fu_250_p1 + zext_ln377_250_fu_262_p1);

assign p_Val2_502_fu_328_p2 = (zext_ln823_3_fu_312_p1 + zext_ln377_251_fu_324_p1);

assign p_Val2_503_fu_390_p2 = (zext_ln823_4_fu_374_p1 + zext_ln377_252_fu_386_p1);

assign p_Val2_504_fu_452_p2 = (zext_ln823_5_fu_436_p1 + zext_ln377_253_fu_448_p1);

assign p_Val2_505_fu_514_p2 = (zext_ln823_6_fu_498_p1 + zext_ln377_254_fu_510_p1);

assign p_Val2_506_fu_576_p2 = (zext_ln823_7_fu_560_p1 + zext_ln377_255_fu_572_p1);

assign p_Val2_507_fu_638_p2 = (zext_ln823_8_fu_622_p1 + zext_ln377_256_fu_634_p1);

assign p_Val2_508_fu_700_p2 = (zext_ln823_9_fu_684_p1 + zext_ln377_257_fu_696_p1);

assign p_Val2_s_fu_142_p2 = (zext_ln823_fu_126_p1 + zext_ln377_fu_138_p1);

assign select_ln1649_249_fu_226_p3 = ((icmp_ln1649_249_fu_172_p2[0:0] == 1'b1) ? select_ln346_249_fu_218_p3 : 8'd0);

assign select_ln1649_250_fu_288_p3 = ((icmp_ln1649_250_fu_234_p2[0:0] == 1'b1) ? select_ln346_250_fu_280_p3 : 8'd0);

assign select_ln1649_251_fu_350_p3 = ((icmp_ln1649_251_fu_296_p2[0:0] == 1'b1) ? select_ln346_251_fu_342_p3 : 8'd0);

assign select_ln1649_252_fu_412_p3 = ((icmp_ln1649_252_fu_358_p2[0:0] == 1'b1) ? select_ln346_252_fu_404_p3 : 8'd0);

assign select_ln1649_253_fu_474_p3 = ((icmp_ln1649_253_fu_420_p2[0:0] == 1'b1) ? select_ln346_253_fu_466_p3 : 8'd0);

assign select_ln1649_254_fu_536_p3 = ((icmp_ln1649_254_fu_482_p2[0:0] == 1'b1) ? select_ln346_254_fu_528_p3 : 8'd0);

assign select_ln1649_255_fu_598_p3 = ((icmp_ln1649_255_fu_544_p2[0:0] == 1'b1) ? select_ln346_255_fu_590_p3 : 8'd0);

assign select_ln1649_256_fu_660_p3 = ((icmp_ln1649_256_fu_606_p2[0:0] == 1'b1) ? select_ln346_256_fu_652_p3 : 8'd0);

assign select_ln1649_257_fu_722_p3 = ((icmp_ln1649_257_fu_668_p2[0:0] == 1'b1) ? select_ln346_257_fu_714_p3 : 8'd0);

assign select_ln1649_fu_164_p3 = ((icmp_ln1649_fu_110_p2[0:0] == 1'b1) ? select_ln346_fu_156_p3 : 8'd0);

assign select_ln346_249_fu_218_p3 = ((overflow_249_fu_210_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_500_fu_204_p2);

assign select_ln346_250_fu_280_p3 = ((overflow_250_fu_272_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_501_fu_266_p2);

assign select_ln346_251_fu_342_p3 = ((overflow_251_fu_334_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_502_fu_328_p2);

assign select_ln346_252_fu_404_p3 = ((overflow_252_fu_396_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_503_fu_390_p2);

assign select_ln346_253_fu_466_p3 = ((overflow_253_fu_458_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_504_fu_452_p2);

assign select_ln346_254_fu_528_p3 = ((overflow_254_fu_520_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_505_fu_514_p2);

assign select_ln346_255_fu_590_p3 = ((overflow_255_fu_582_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_506_fu_576_p2);

assign select_ln346_256_fu_652_p3 = ((overflow_256_fu_644_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_507_fu_638_p2);

assign select_ln346_257_fu_714_p3 = ((overflow_257_fu_706_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_508_fu_700_p2);

assign select_ln346_fu_156_p3 = ((overflow_fu_148_p3[0:0] == 1'b1) ? 8'd255 : p_Val2_s_fu_142_p2);

assign tmp_751_fu_192_p3 = p_read1[32'd4];

assign tmp_753_fu_254_p3 = p_read2[32'd4];

assign tmp_755_fu_316_p3 = p_read3[32'd4];

assign tmp_757_fu_378_p3 = p_read4[32'd4];

assign tmp_759_fu_440_p3 = p_read5[32'd4];

assign tmp_761_fu_502_p3 = p_read6[32'd4];

assign tmp_763_fu_564_p3 = p_read7[32'd4];

assign tmp_765_fu_626_p3 = p_read8[32'd4];

assign tmp_767_fu_688_p3 = p_read9[32'd4];

assign tmp_fu_130_p3 = p_read[32'd4];

assign trunc_ln823_1_fu_178_p4 = {{p_read1[11:5]}};

assign trunc_ln823_2_fu_240_p4 = {{p_read2[11:5]}};

assign trunc_ln823_3_fu_302_p4 = {{p_read3[11:5]}};

assign trunc_ln823_4_fu_364_p4 = {{p_read4[11:5]}};

assign trunc_ln823_5_fu_426_p4 = {{p_read5[11:5]}};

assign trunc_ln823_6_fu_488_p4 = {{p_read6[11:5]}};

assign trunc_ln823_7_fu_550_p4 = {{p_read7[11:5]}};

assign trunc_ln823_8_fu_612_p4 = {{p_read8[11:5]}};

assign trunc_ln823_9_fu_674_p4 = {{p_read9[11:5]}};

assign trunc_ln_fu_116_p4 = {{p_read[11:5]}};

assign zext_ln377_249_fu_200_p1 = tmp_751_fu_192_p3;

assign zext_ln377_250_fu_262_p1 = tmp_753_fu_254_p3;

assign zext_ln377_251_fu_324_p1 = tmp_755_fu_316_p3;

assign zext_ln377_252_fu_386_p1 = tmp_757_fu_378_p3;

assign zext_ln377_253_fu_448_p1 = tmp_759_fu_440_p3;

assign zext_ln377_254_fu_510_p1 = tmp_761_fu_502_p3;

assign zext_ln377_255_fu_572_p1 = tmp_763_fu_564_p3;

assign zext_ln377_256_fu_634_p1 = tmp_765_fu_626_p3;

assign zext_ln377_257_fu_696_p1 = tmp_767_fu_688_p3;

assign zext_ln377_fu_138_p1 = tmp_fu_130_p3;

assign zext_ln823_1_fu_188_p1 = trunc_ln823_1_fu_178_p4;

assign zext_ln823_2_fu_250_p1 = trunc_ln823_2_fu_240_p4;

assign zext_ln823_3_fu_312_p1 = trunc_ln823_3_fu_302_p4;

assign zext_ln823_4_fu_374_p1 = trunc_ln823_4_fu_364_p4;

assign zext_ln823_5_fu_436_p1 = trunc_ln823_5_fu_426_p4;

assign zext_ln823_6_fu_498_p1 = trunc_ln823_6_fu_488_p4;

assign zext_ln823_7_fu_560_p1 = trunc_ln823_7_fu_550_p4;

assign zext_ln823_8_fu_622_p1 = trunc_ln823_8_fu_612_p4;

assign zext_ln823_9_fu_684_p1 = trunc_ln823_9_fu_674_p4;

assign zext_ln823_fu_126_p1 = trunc_ln_fu_116_p4;

endmodule //myproject_relu_ap_fixed_16_6_0_0_0_ap_fixed_9_4_0_0_0_relu_config14_s
