// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_linear_ap_fixed_9_3_5_3_0_ap_fixed_16_6_0_0_0_linear_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] p_read;
input  [8:0] p_read1;
input  [8:0] p_read2;
input  [8:0] p_read3;
input  [8:0] p_read4;
input  [8:0] p_read5;
input  [8:0] p_read6;
input  [8:0] p_read7;
input  [8:0] p_read8;
input  [8:0] p_read9;
output  [12:0] ap_return_0;
output  [12:0] ap_return_1;
output  [12:0] ap_return_2;
output  [12:0] ap_return_3;
output  [12:0] ap_return_4;
output  [12:0] ap_return_5;
output  [12:0] ap_return_6;
output  [12:0] ap_return_7;
output  [12:0] ap_return_8;
output  [12:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] ap_return_0;
reg[12:0] ap_return_1;
reg[12:0] ap_return_2;
reg[12:0] ap_return_3;
reg[12:0] ap_return_4;
reg[12:0] ap_return_5;
reg[12:0] ap_return_6;
reg[12:0] ap_return_7;
reg[12:0] ap_return_8;
reg[12:0] ap_return_9;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [12:0] shl_ln_fu_96_p3;
wire   [12:0] shl_ln838_1_fu_104_p3;
wire   [12:0] shl_ln838_2_fu_112_p3;
wire   [12:0] shl_ln838_3_fu_120_p3;
wire   [12:0] shl_ln838_4_fu_128_p3;
wire   [12:0] shl_ln838_5_fu_136_p3;
wire   [12:0] shl_ln838_6_fu_144_p3;
wire   [12:0] shl_ln838_7_fu_152_p3;
wire   [12:0] shl_ln838_8_fu_160_p3;
wire   [12:0] shl_ln838_9_fu_168_p3;
reg   [12:0] ap_return_0_preg;
reg   [12:0] ap_return_1_preg;
reg   [12:0] ap_return_2_preg;
reg   [12:0] ap_return_3_preg;
reg   [12:0] ap_return_4_preg;
reg   [12:0] ap_return_5_preg;
reg   [12:0] ap_return_6_preg;
reg   [12:0] ap_return_7_preg;
reg   [12:0] ap_return_8_preg;
reg   [12:0] ap_return_9_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 13'd0;
#0 ap_return_1_preg = 13'd0;
#0 ap_return_2_preg = 13'd0;
#0 ap_return_3_preg = 13'd0;
#0 ap_return_4_preg = 13'd0;
#0 ap_return_5_preg = 13'd0;
#0 ap_return_6_preg = 13'd0;
#0 ap_return_7_preg = 13'd0;
#0 ap_return_8_preg = 13'd0;
#0 ap_return_9_preg = 13'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
        ap_return_0_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[12 : 4] <= shl_ln_fu_96_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
        ap_return_1_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[12 : 4] <= shl_ln838_1_fu_104_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
        ap_return_2_preg[10] <= 1'b0;
        ap_return_2_preg[11] <= 1'b0;
        ap_return_2_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[12 : 4] <= shl_ln838_2_fu_112_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
        ap_return_3_preg[10] <= 1'b0;
        ap_return_3_preg[11] <= 1'b0;
        ap_return_3_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_3_preg[12 : 4] <= shl_ln838_3_fu_120_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_4_preg[4] <= 1'b0;
        ap_return_4_preg[5] <= 1'b0;
        ap_return_4_preg[6] <= 1'b0;
        ap_return_4_preg[7] <= 1'b0;
        ap_return_4_preg[8] <= 1'b0;
        ap_return_4_preg[9] <= 1'b0;
        ap_return_4_preg[10] <= 1'b0;
        ap_return_4_preg[11] <= 1'b0;
        ap_return_4_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_4_preg[12 : 4] <= shl_ln838_4_fu_128_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_5_preg[4] <= 1'b0;
        ap_return_5_preg[5] <= 1'b0;
        ap_return_5_preg[6] <= 1'b0;
        ap_return_5_preg[7] <= 1'b0;
        ap_return_5_preg[8] <= 1'b0;
        ap_return_5_preg[9] <= 1'b0;
        ap_return_5_preg[10] <= 1'b0;
        ap_return_5_preg[11] <= 1'b0;
        ap_return_5_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_5_preg[12 : 4] <= shl_ln838_5_fu_136_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_6_preg[4] <= 1'b0;
        ap_return_6_preg[5] <= 1'b0;
        ap_return_6_preg[6] <= 1'b0;
        ap_return_6_preg[7] <= 1'b0;
        ap_return_6_preg[8] <= 1'b0;
        ap_return_6_preg[9] <= 1'b0;
        ap_return_6_preg[10] <= 1'b0;
        ap_return_6_preg[11] <= 1'b0;
        ap_return_6_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_6_preg[12 : 4] <= shl_ln838_6_fu_144_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_7_preg[4] <= 1'b0;
        ap_return_7_preg[5] <= 1'b0;
        ap_return_7_preg[6] <= 1'b0;
        ap_return_7_preg[7] <= 1'b0;
        ap_return_7_preg[8] <= 1'b0;
        ap_return_7_preg[9] <= 1'b0;
        ap_return_7_preg[10] <= 1'b0;
        ap_return_7_preg[11] <= 1'b0;
        ap_return_7_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_7_preg[12 : 4] <= shl_ln838_7_fu_152_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_8_preg[4] <= 1'b0;
        ap_return_8_preg[5] <= 1'b0;
        ap_return_8_preg[6] <= 1'b0;
        ap_return_8_preg[7] <= 1'b0;
        ap_return_8_preg[8] <= 1'b0;
        ap_return_8_preg[9] <= 1'b0;
        ap_return_8_preg[10] <= 1'b0;
        ap_return_8_preg[11] <= 1'b0;
        ap_return_8_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_8_preg[12 : 4] <= shl_ln838_8_fu_160_p3[12 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_9_preg[4] <= 1'b0;
        ap_return_9_preg[5] <= 1'b0;
        ap_return_9_preg[6] <= 1'b0;
        ap_return_9_preg[7] <= 1'b0;
        ap_return_9_preg[8] <= 1'b0;
        ap_return_9_preg[9] <= 1'b0;
        ap_return_9_preg[10] <= 1'b0;
        ap_return_9_preg[11] <= 1'b0;
        ap_return_9_preg[12] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_9_preg[12 : 4] <= shl_ln838_9_fu_168_p3[12 : 4];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = shl_ln_fu_96_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = shl_ln838_1_fu_104_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = shl_ln838_2_fu_112_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = shl_ln838_3_fu_120_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = shl_ln838_4_fu_128_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = shl_ln838_5_fu_136_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = shl_ln838_6_fu_144_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = shl_ln838_7_fu_152_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = shl_ln838_8_fu_160_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = shl_ln838_9_fu_168_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign shl_ln838_1_fu_104_p3 = {{p_read1}, {4'd0}};

assign shl_ln838_2_fu_112_p3 = {{p_read2}, {4'd0}};

assign shl_ln838_3_fu_120_p3 = {{p_read3}, {4'd0}};

assign shl_ln838_4_fu_128_p3 = {{p_read4}, {4'd0}};

assign shl_ln838_5_fu_136_p3 = {{p_read5}, {4'd0}};

assign shl_ln838_6_fu_144_p3 = {{p_read6}, {4'd0}};

assign shl_ln838_7_fu_152_p3 = {{p_read7}, {4'd0}};

assign shl_ln838_8_fu_160_p3 = {{p_read8}, {4'd0}};

assign shl_ln838_9_fu_168_p3 = {{p_read9}, {4'd0}};

assign shl_ln_fu_96_p3 = {{p_read}, {4'd0}};

always @ (posedge ap_clk) begin
    ap_return_0_preg[3:0] <= 4'b0000;
    ap_return_1_preg[3:0] <= 4'b0000;
    ap_return_2_preg[3:0] <= 4'b0000;
    ap_return_3_preg[3:0] <= 4'b0000;
    ap_return_4_preg[3:0] <= 4'b0000;
    ap_return_5_preg[3:0] <= 4'b0000;
    ap_return_6_preg[3:0] <= 4'b0000;
    ap_return_7_preg[3:0] <= 4'b0000;
    ap_return_8_preg[3:0] <= 4'b0000;
    ap_return_9_preg[3:0] <= 4'b0000;
end

endmodule //myproject_linear_ap_fixed_9_3_5_3_0_ap_fixed_16_6_0_0_0_linear_config13_s
