-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_ap_fixed_16_6_0_0_0_ap_fixed_9_4_0_0_0_relu_config14_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (12 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (12 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of myproject_relu_ap_fixed_16_6_0_0_0_ap_fixed_9_4_0_0_0_relu_config14_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_116_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_fu_126_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_fu_138_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_fu_148_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_1_fu_178_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_751_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_1_fu_188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_249_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_249_fu_210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_500_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_249_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_249_fu_218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_2_fu_240_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_753_fu_254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_2_fu_250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_250_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_250_fu_272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_501_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_250_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_250_fu_280_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_3_fu_302_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_755_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_3_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_251_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_251_fu_334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_502_fu_328_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_251_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_251_fu_342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_4_fu_364_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_757_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_4_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_252_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_252_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_503_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_252_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_252_fu_404_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_5_fu_426_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_759_fu_440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_5_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_253_fu_448_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_253_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_504_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_253_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_253_fu_466_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_6_fu_488_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_761_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_6_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_254_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_254_fu_520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_505_fu_514_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_254_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_254_fu_528_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_7_fu_550_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_763_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_7_fu_560_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_255_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_255_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_506_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_255_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_255_fu_590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_8_fu_612_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_765_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_8_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_256_fu_634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_256_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_507_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_256_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_256_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln823_9_fu_674_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_767_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln823_9_fu_684_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln377_257_fu_696_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_257_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_508_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_257_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_257_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_fu_164_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_249_fu_226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_250_fu_288_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_251_fu_350_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_252_fu_412_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_253_fu_474_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_254_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_255_fu_598_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_256_fu_660_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1649_257_fu_722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= select_ln1649_fu_164_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= select_ln1649_249_fu_226_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= select_ln1649_250_fu_288_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= select_ln1649_251_fu_350_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_4_preg <= select_ln1649_252_fu_412_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_5_preg <= select_ln1649_253_fu_474_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_6_preg <= select_ln1649_254_fu_536_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_7_preg <= select_ln1649_255_fu_598_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_8_preg <= select_ln1649_256_fu_660_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_9_preg <= select_ln1649_257_fu_722_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_fu_164_p3, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= select_ln1649_fu_164_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_249_fu_226_p3, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= select_ln1649_249_fu_226_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_250_fu_288_p3, ap_return_2_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= select_ln1649_250_fu_288_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_251_fu_350_p3, ap_return_3_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= select_ln1649_251_fu_350_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_252_fu_412_p3, ap_return_4_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_4 <= select_ln1649_252_fu_412_p3;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_253_fu_474_p3, ap_return_5_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_5 <= select_ln1649_253_fu_474_p3;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_254_fu_536_p3, ap_return_6_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_6 <= select_ln1649_254_fu_536_p3;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_255_fu_598_p3, ap_return_7_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_7 <= select_ln1649_255_fu_598_p3;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_256_fu_660_p3, ap_return_8_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_8 <= select_ln1649_256_fu_660_p3;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1649_257_fu_722_p3, ap_return_9_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_9 <= select_ln1649_257_fu_722_p3;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    icmp_ln1649_249_fu_172_p2 <= "1" when (signed(p_read1) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_250_fu_234_p2 <= "1" when (signed(p_read2) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_251_fu_296_p2 <= "1" when (signed(p_read3) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_252_fu_358_p2 <= "1" when (signed(p_read4) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_253_fu_420_p2 <= "1" when (signed(p_read5) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_254_fu_482_p2 <= "1" when (signed(p_read6) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_255_fu_544_p2 <= "1" when (signed(p_read7) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_256_fu_606_p2 <= "1" when (signed(p_read8) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_257_fu_668_p2 <= "1" when (signed(p_read9) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1649_fu_110_p2 <= "1" when (signed(p_read) > signed(ap_const_lv13_0)) else "0";
    overflow_249_fu_210_p3 <= p_read1(12 downto 12);
    overflow_250_fu_272_p3 <= p_read2(12 downto 12);
    overflow_251_fu_334_p3 <= p_read3(12 downto 12);
    overflow_252_fu_396_p3 <= p_read4(12 downto 12);
    overflow_253_fu_458_p3 <= p_read5(12 downto 12);
    overflow_254_fu_520_p3 <= p_read6(12 downto 12);
    overflow_255_fu_582_p3 <= p_read7(12 downto 12);
    overflow_256_fu_644_p3 <= p_read8(12 downto 12);
    overflow_257_fu_706_p3 <= p_read9(12 downto 12);
    overflow_fu_148_p3 <= p_read(12 downto 12);
    p_Val2_500_fu_204_p2 <= std_logic_vector(unsigned(zext_ln823_1_fu_188_p1) + unsigned(zext_ln377_249_fu_200_p1));
    p_Val2_501_fu_266_p2 <= std_logic_vector(unsigned(zext_ln823_2_fu_250_p1) + unsigned(zext_ln377_250_fu_262_p1));
    p_Val2_502_fu_328_p2 <= std_logic_vector(unsigned(zext_ln823_3_fu_312_p1) + unsigned(zext_ln377_251_fu_324_p1));
    p_Val2_503_fu_390_p2 <= std_logic_vector(unsigned(zext_ln823_4_fu_374_p1) + unsigned(zext_ln377_252_fu_386_p1));
    p_Val2_504_fu_452_p2 <= std_logic_vector(unsigned(zext_ln823_5_fu_436_p1) + unsigned(zext_ln377_253_fu_448_p1));
    p_Val2_505_fu_514_p2 <= std_logic_vector(unsigned(zext_ln823_6_fu_498_p1) + unsigned(zext_ln377_254_fu_510_p1));
    p_Val2_506_fu_576_p2 <= std_logic_vector(unsigned(zext_ln823_7_fu_560_p1) + unsigned(zext_ln377_255_fu_572_p1));
    p_Val2_507_fu_638_p2 <= std_logic_vector(unsigned(zext_ln823_8_fu_622_p1) + unsigned(zext_ln377_256_fu_634_p1));
    p_Val2_508_fu_700_p2 <= std_logic_vector(unsigned(zext_ln823_9_fu_684_p1) + unsigned(zext_ln377_257_fu_696_p1));
    p_Val2_s_fu_142_p2 <= std_logic_vector(unsigned(zext_ln823_fu_126_p1) + unsigned(zext_ln377_fu_138_p1));
    select_ln1649_249_fu_226_p3 <= 
        select_ln346_249_fu_218_p3 when (icmp_ln1649_249_fu_172_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_250_fu_288_p3 <= 
        select_ln346_250_fu_280_p3 when (icmp_ln1649_250_fu_234_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_251_fu_350_p3 <= 
        select_ln346_251_fu_342_p3 when (icmp_ln1649_251_fu_296_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_252_fu_412_p3 <= 
        select_ln346_252_fu_404_p3 when (icmp_ln1649_252_fu_358_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_253_fu_474_p3 <= 
        select_ln346_253_fu_466_p3 when (icmp_ln1649_253_fu_420_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_254_fu_536_p3 <= 
        select_ln346_254_fu_528_p3 when (icmp_ln1649_254_fu_482_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_255_fu_598_p3 <= 
        select_ln346_255_fu_590_p3 when (icmp_ln1649_255_fu_544_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_256_fu_660_p3 <= 
        select_ln346_256_fu_652_p3 when (icmp_ln1649_256_fu_606_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_257_fu_722_p3 <= 
        select_ln346_257_fu_714_p3 when (icmp_ln1649_257_fu_668_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1649_fu_164_p3 <= 
        select_ln346_fu_156_p3 when (icmp_ln1649_fu_110_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln346_249_fu_218_p3 <= 
        ap_const_lv8_FF when (overflow_249_fu_210_p3(0) = '1') else 
        p_Val2_500_fu_204_p2;
    select_ln346_250_fu_280_p3 <= 
        ap_const_lv8_FF when (overflow_250_fu_272_p3(0) = '1') else 
        p_Val2_501_fu_266_p2;
    select_ln346_251_fu_342_p3 <= 
        ap_const_lv8_FF when (overflow_251_fu_334_p3(0) = '1') else 
        p_Val2_502_fu_328_p2;
    select_ln346_252_fu_404_p3 <= 
        ap_const_lv8_FF when (overflow_252_fu_396_p3(0) = '1') else 
        p_Val2_503_fu_390_p2;
    select_ln346_253_fu_466_p3 <= 
        ap_const_lv8_FF when (overflow_253_fu_458_p3(0) = '1') else 
        p_Val2_504_fu_452_p2;
    select_ln346_254_fu_528_p3 <= 
        ap_const_lv8_FF when (overflow_254_fu_520_p3(0) = '1') else 
        p_Val2_505_fu_514_p2;
    select_ln346_255_fu_590_p3 <= 
        ap_const_lv8_FF when (overflow_255_fu_582_p3(0) = '1') else 
        p_Val2_506_fu_576_p2;
    select_ln346_256_fu_652_p3 <= 
        ap_const_lv8_FF when (overflow_256_fu_644_p3(0) = '1') else 
        p_Val2_507_fu_638_p2;
    select_ln346_257_fu_714_p3 <= 
        ap_const_lv8_FF when (overflow_257_fu_706_p3(0) = '1') else 
        p_Val2_508_fu_700_p2;
    select_ln346_fu_156_p3 <= 
        ap_const_lv8_FF when (overflow_fu_148_p3(0) = '1') else 
        p_Val2_s_fu_142_p2;
    tmp_751_fu_192_p3 <= p_read1(4 downto 4);
    tmp_753_fu_254_p3 <= p_read2(4 downto 4);
    tmp_755_fu_316_p3 <= p_read3(4 downto 4);
    tmp_757_fu_378_p3 <= p_read4(4 downto 4);
    tmp_759_fu_440_p3 <= p_read5(4 downto 4);
    tmp_761_fu_502_p3 <= p_read6(4 downto 4);
    tmp_763_fu_564_p3 <= p_read7(4 downto 4);
    tmp_765_fu_626_p3 <= p_read8(4 downto 4);
    tmp_767_fu_688_p3 <= p_read9(4 downto 4);
    tmp_fu_130_p3 <= p_read(4 downto 4);
    trunc_ln823_1_fu_178_p4 <= p_read1(11 downto 5);
    trunc_ln823_2_fu_240_p4 <= p_read2(11 downto 5);
    trunc_ln823_3_fu_302_p4 <= p_read3(11 downto 5);
    trunc_ln823_4_fu_364_p4 <= p_read4(11 downto 5);
    trunc_ln823_5_fu_426_p4 <= p_read5(11 downto 5);
    trunc_ln823_6_fu_488_p4 <= p_read6(11 downto 5);
    trunc_ln823_7_fu_550_p4 <= p_read7(11 downto 5);
    trunc_ln823_8_fu_612_p4 <= p_read8(11 downto 5);
    trunc_ln823_9_fu_674_p4 <= p_read9(11 downto 5);
    trunc_ln_fu_116_p4 <= p_read(11 downto 5);
    zext_ln377_249_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_751_fu_192_p3),8));
    zext_ln377_250_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_753_fu_254_p3),8));
    zext_ln377_251_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_755_fu_316_p3),8));
    zext_ln377_252_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_757_fu_378_p3),8));
    zext_ln377_253_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_759_fu_440_p3),8));
    zext_ln377_254_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_761_fu_502_p3),8));
    zext_ln377_255_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_763_fu_564_p3),8));
    zext_ln377_256_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_765_fu_626_p3),8));
    zext_ln377_257_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_767_fu_688_p3),8));
    zext_ln377_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_130_p3),8));
    zext_ln823_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_1_fu_178_p4),8));
    zext_ln823_2_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_2_fu_240_p4),8));
    zext_ln823_3_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_3_fu_302_p4),8));
    zext_ln823_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_4_fu_364_p4),8));
    zext_ln823_5_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_5_fu_426_p4),8));
    zext_ln823_6_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_6_fu_488_p4),8));
    zext_ln823_7_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_7_fu_550_p4),8));
    zext_ln823_8_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_8_fu_612_p4),8));
    zext_ln823_9_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_9_fu_674_p4),8));
    zext_ln823_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_116_p4),8));
end behav;
