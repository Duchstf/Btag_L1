-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity btag_nn_dense_latency_ap_ufixed_9_0_0_0_0_ap_fixed_16_6_5_3_0_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of btag_nn_dense_latency_ap_ufixed_9_0_0_0_0_ap_fixed_16_6_5_3_0_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv17_1FF95 : STD_LOGIC_VECTOR (16 downto 0) := "11111111110010101";
    constant ap_const_lv18_3FF72 : STD_LOGIC_VECTOR (17 downto 0) := "111111111101110010";
    constant ap_const_lv16_67 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_C0 : STD_LOGIC_VECTOR (10 downto 0) := "00011000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_read25_reg_189 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read25_reg_189_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read14_reg_194 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read_709_reg_199 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln818_cast_reg_204 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_s_reg_209 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_62_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_62_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_V_303_fu_63_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_303_fu_63_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln818_fu_64_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln818_fu_64_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln818_fu_64_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_62_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_303_fu_63_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln_fu_150_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_fu_164_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast_cast_fu_143_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_fu_169_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_662_fu_173_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln813_323_fu_179_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln813_fu_160_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_663_fu_183_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln818_fu_64_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_303_fu_63_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_62_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component btag_nn_mul_9ns_8s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component btag_nn_mul_9ns_9s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component btag_nn_mul_9ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_9ns_8s_17_1_1_U1879 : component btag_nn_mul_9ns_8s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_fu_62_p0,
        din1 => r_V_fu_62_p1,
        dout => r_V_fu_62_p2);

    mul_9ns_9s_18_1_1_U1880 : component btag_nn_mul_9ns_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_303_fu_63_p0,
        din1 => r_V_303_fu_63_p1,
        dout => r_V_303_fu_63_p2);

    mul_9ns_8ns_16_1_1_U1881 : component btag_nn_mul_9ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln818_fu_64_p0,
        din1 => mul_ln818_fu_64_p1,
        dout => mul_ln818_fu_64_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv14_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_preg <= add_ln813_663_fu_183_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln818_cast_reg_204 <= mul_ln818_fu_64_p2(15 downto 5);
                p_read14_reg_194 <= p_read1;
                p_read25_reg_189 <= p_read2;
                p_read25_reg_189_pp0_iter1_reg <= p_read25_reg_189;
                p_read_709_reg_199 <= p_read;
                trunc_ln818_s_reg_209 <= r_V_fu_62_p2(16 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln813_662_fu_173_p2 <= std_logic_vector(signed(p_cast_cast_fu_143_p1) + signed(zext_ln813_fu_169_p1));
    add_ln813_663_fu_183_p2 <= std_logic_vector(signed(sext_ln813_323_fu_179_p1) + signed(sext_ln813_fu_160_p1));
    add_ln813_fu_164_p2 <= std_logic_vector(unsigned(lshr_ln818_cast_reg_204) + unsigned(ap_const_lv11_C0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_block_pp0_stage0_11001, add_ln813_663_fu_183_p2, ap_return_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return <= add_ln813_663_fu_183_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    mul_ln818_fu_64_p0 <= mul_ln818_fu_64_p00(9 - 1 downto 0);
    mul_ln818_fu_64_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_709_reg_199),16));
    mul_ln818_fu_64_p1 <= ap_const_lv16_67(8 - 1 downto 0);
        p_cast_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_s_reg_209),13));

    r_V_303_fu_63_p0 <= r_V_303_fu_63_p00(9 - 1 downto 0);
    r_V_303_fu_63_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read25_reg_189_pp0_iter1_reg),18));
    r_V_303_fu_63_p1 <= ap_const_lv18_3FF72(9 - 1 downto 0);
    r_V_fu_62_p0 <= r_V_fu_62_p00(9 - 1 downto 0);
    r_V_fu_62_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read14_reg_194),17));
    r_V_fu_62_p1 <= ap_const_lv17_1FF95(8 - 1 downto 0);
        sext_ln813_323_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_662_fu_173_p2),14));

        sext_ln813_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_150_p4),14));

    trunc_ln_fu_150_p4 <= r_V_303_fu_63_p2(17 downto 5);
    zext_ln813_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_fu_164_p2),13));
end behav;
