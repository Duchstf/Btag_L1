-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity btag_nn_relu_ap_fixed_16_6_0_0_0_ap_ufixed_9_0_0_0_0_relu_config14_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of btag_nn_relu_ap_fixed_16_6_0_0_0_ap_ufixed_9_0_0_0_0_relu_config14_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1649_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln302_fu_148_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln302_reg_381 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1649_229_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_229_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_229_fu_240_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln302_229_reg_391 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1649_230_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_230_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_230_fu_332_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln302_230_reg_401 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln823_fu_80_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_70_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln377_fu_92_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_102_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_459_fu_96_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_84_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln888_fu_132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln823_229_fu_172_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_460_fu_162_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln377_229_fu_184_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_194_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_461_fu_188_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_491_fu_216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_229_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_229_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_229_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln888_229_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_229_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln823_230_fu_264_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_462_fu_254_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln377_230_fu_276_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_286_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_463_fu_280_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_493_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_230_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_230_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_230_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln888_230_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_230_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1649_fu_340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1649_229_fu_346_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1649_230_fu_352_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv9_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_0_preg <= select_ln1649_fu_340_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv9_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_1_preg <= select_ln1649_229_fu_346_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv9_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_2_preg <= select_ln1649_230_fu_352_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1649_229_reg_386 <= icmp_ln1649_229_fu_156_p2;
                icmp_ln1649_230_reg_396 <= icmp_ln1649_230_fu_248_p2;
                icmp_ln1649_reg_376 <= icmp_ln1649_fu_64_p2;
                select_ln302_229_reg_391 <= select_ln302_229_fu_240_p3;
                select_ln302_230_reg_401 <= select_ln302_230_fu_332_p3;
                select_ln302_reg_381 <= select_ln302_fu_148_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Range1_all_ones_229_fu_204_p2 <= "1" when (tmp_12_fu_194_p4 = ap_const_lv6_3F) else "0";
    Range1_all_ones_230_fu_296_p2 <= "1" when (tmp_s_fu_286_p4 = ap_const_lv6_3F) else "0";
    Range1_all_ones_fu_112_p2 <= "1" when (tmp7_fu_102_p4 = ap_const_lv6_3F) else "0";
    Range1_all_zeros_229_fu_210_p2 <= "1" when (tmp_12_fu_194_p4 = ap_const_lv6_0) else "0";
    Range1_all_zeros_230_fu_302_p2 <= "1" when (tmp_s_fu_286_p4 = ap_const_lv6_0) else "0";
    Range1_all_zeros_fu_118_p2 <= "1" when (tmp7_fu_102_p4 = ap_const_lv6_0) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln1649_fu_340_p3, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_0 <= select_ln1649_fu_340_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln1649_229_fu_346_p3, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_1 <= select_ln1649_229_fu_346_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln1649_230_fu_352_p3, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_2 <= select_ln1649_230_fu_352_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    deleted_zeros_229_fu_232_p3 <= 
        select_ln888_229_fu_224_p3 when (p_Result_229_fu_176_p3(0) = '1') else 
        Range1_all_zeros_229_fu_210_p2;
    deleted_zeros_230_fu_324_p3 <= 
        select_ln888_230_fu_316_p3 when (p_Result_230_fu_268_p3(0) = '1') else 
        Range1_all_zeros_230_fu_302_p2;
    deleted_zeros_fu_140_p3 <= 
        select_ln888_fu_132_p3 when (p_Result_s_fu_84_p3(0) = '1') else 
        Range1_all_zeros_fu_118_p2;
    icmp_ln1649_229_fu_156_p2 <= "1" when (signed(p_read1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1649_230_fu_248_p2 <= "1" when (signed(p_read2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1649_fu_64_p2 <= "1" when (signed(p_read) > signed(ap_const_lv16_0)) else "0";
    p_Result_229_fu_176_p3 <= p_read1(9 downto 9);
    p_Result_230_fu_268_p3 <= p_read2(9 downto 9);
    p_Result_s_fu_84_p3 <= p_read(9 downto 9);
    p_Val2_459_fu_96_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_70_p4) + unsigned(zext_ln377_fu_92_p1));
    p_Val2_460_fu_162_p4 <= p_read1(9 downto 1);
    p_Val2_461_fu_188_p2 <= std_logic_vector(unsigned(p_Val2_460_fu_162_p4) + unsigned(zext_ln377_229_fu_184_p1));
    p_Val2_462_fu_254_p4 <= p_read2(9 downto 1);
    p_Val2_463_fu_280_p2 <= std_logic_vector(unsigned(p_Val2_462_fu_254_p4) + unsigned(zext_ln377_230_fu_276_p1));
    p_Val2_s_fu_70_p4 <= p_read(9 downto 1);
    select_ln1649_229_fu_346_p3 <= 
        select_ln302_229_reg_391 when (icmp_ln1649_229_reg_386(0) = '1') else 
        ap_const_lv9_0;
    select_ln1649_230_fu_352_p3 <= 
        select_ln302_230_reg_401 when (icmp_ln1649_230_reg_396(0) = '1') else 
        ap_const_lv9_0;
    select_ln1649_fu_340_p3 <= 
        select_ln302_reg_381 when (icmp_ln1649_reg_376(0) = '1') else 
        ap_const_lv9_0;
    select_ln302_229_fu_240_p3 <= 
        p_Val2_461_fu_188_p2 when (deleted_zeros_229_fu_232_p3(0) = '1') else 
        ap_const_lv9_1FF;
    select_ln302_230_fu_332_p3 <= 
        p_Val2_463_fu_280_p2 when (deleted_zeros_230_fu_324_p3(0) = '1') else 
        ap_const_lv9_1FF;
    select_ln302_fu_148_p3 <= 
        p_Val2_459_fu_96_p2 when (deleted_zeros_fu_140_p3(0) = '1') else 
        ap_const_lv9_1FF;
    select_ln888_229_fu_224_p3 <= 
        Range1_all_zeros_229_fu_210_p2 when (tmp_491_fu_216_p3(0) = '1') else 
        Range1_all_ones_229_fu_204_p2;
    select_ln888_230_fu_316_p3 <= 
        Range1_all_zeros_230_fu_302_p2 when (tmp_493_fu_308_p3(0) = '1') else 
        Range1_all_ones_230_fu_296_p2;
    select_ln888_fu_132_p3 <= 
        Range1_all_zeros_fu_118_p2 when (tmp_fu_124_p3(0) = '1') else 
        Range1_all_ones_fu_112_p2;
    tmp7_fu_102_p4 <= p_read(15 downto 10);
    tmp_12_fu_194_p4 <= p_read1(15 downto 10);
    tmp_491_fu_216_p3 <= p_Val2_461_fu_188_p2(8 downto 8);
    tmp_493_fu_308_p3 <= p_Val2_463_fu_280_p2(8 downto 8);
    tmp_fu_124_p3 <= p_Val2_459_fu_96_p2(8 downto 8);
    tmp_s_fu_286_p4 <= p_read2(15 downto 10);
    trunc_ln823_229_fu_172_p1 <= p_read1(1 - 1 downto 0);
    trunc_ln823_230_fu_264_p1 <= p_read2(1 - 1 downto 0);
    trunc_ln823_fu_80_p1 <= p_read(1 - 1 downto 0);
    zext_ln377_229_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_229_fu_172_p1),9));
    zext_ln377_230_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_230_fu_264_p1),9));
    zext_ln377_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln823_fu_80_p1),9));
end behav;
