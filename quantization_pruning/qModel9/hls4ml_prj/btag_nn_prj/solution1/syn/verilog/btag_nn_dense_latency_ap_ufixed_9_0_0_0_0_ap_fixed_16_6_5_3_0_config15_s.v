// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module btag_nn_dense_latency_ap_ufixed_9_0_0_0_0_ap_fixed_16_6_5_3_0_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] p_read;
input  [8:0] p_read1;
input  [8:0] p_read2;
output  [13:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg   [8:0] p_read25_reg_189;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] p_read25_reg_189_pp0_iter1_reg;
reg   [8:0] p_read14_reg_194;
reg   [8:0] p_read_709_reg_199;
reg   [10:0] lshr_ln818_cast_reg_204;
reg   [11:0] trunc_ln818_s_reg_209;
wire   [8:0] r_V_fu_62_p0;
wire  signed [7:0] r_V_fu_62_p1;
wire    ap_block_pp0_stage0;
wire   [8:0] r_V_303_fu_63_p0;
wire  signed [8:0] r_V_303_fu_63_p1;
wire   [8:0] mul_ln818_fu_64_p0;
wire   [7:0] mul_ln818_fu_64_p1;
wire   [15:0] mul_ln818_fu_64_p2;
wire   [16:0] r_V_fu_62_p2;
wire   [17:0] r_V_303_fu_63_p2;
wire   [12:0] trunc_ln_fu_150_p4;
wire   [10:0] add_ln813_fu_164_p2;
wire  signed [12:0] p_cast_cast_fu_143_p1;
wire   [12:0] zext_ln813_fu_169_p1;
wire   [12:0] add_ln813_662_fu_173_p2;
wire  signed [13:0] sext_ln813_323_fu_179_p1;
wire  signed [13:0] sext_ln813_fu_160_p1;
wire   [13:0] add_ln813_663_fu_183_p2;
reg   [13:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] mul_ln818_fu_64_p00;
wire   [17:0] r_V_303_fu_63_p00;
wire   [16:0] r_V_fu_62_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_preg = 14'd0;
end

btag_nn_mul_9ns_8s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
mul_9ns_8s_17_1_1_U1879(
    .din0(r_V_fu_62_p0),
    .din1(r_V_fu_62_p1),
    .dout(r_V_fu_62_p2)
);

btag_nn_mul_9ns_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9ns_9s_18_1_1_U1880(
    .din0(r_V_303_fu_63_p0),
    .din1(r_V_303_fu_63_p1),
    .dout(r_V_303_fu_63_p2)
);

btag_nn_mul_9ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_9ns_8ns_16_1_1_U1881(
    .din0(mul_ln818_fu_64_p0),
    .din1(mul_ln818_fu_64_p1),
    .dout(mul_ln818_fu_64_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 14'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_return_preg <= add_ln813_663_fu_183_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln818_cast_reg_204 <= {{mul_ln818_fu_64_p2[15:5]}};
        p_read14_reg_194 <= p_read1;
        p_read25_reg_189 <= p_read2;
        p_read25_reg_189_pp0_iter1_reg <= p_read25_reg_189;
        p_read_709_reg_199 <= p_read;
        trunc_ln818_s_reg_209 <= {{r_V_fu_62_p2[16:5]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_return = add_ln813_663_fu_183_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln813_662_fu_173_p2 = ($signed(p_cast_cast_fu_143_p1) + $signed(zext_ln813_fu_169_p1));

assign add_ln813_663_fu_183_p2 = ($signed(sext_ln813_323_fu_179_p1) + $signed(sext_ln813_fu_160_p1));

assign add_ln813_fu_164_p2 = (lshr_ln818_cast_reg_204 + 11'd192);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign mul_ln818_fu_64_p0 = mul_ln818_fu_64_p00;

assign mul_ln818_fu_64_p00 = p_read_709_reg_199;

assign mul_ln818_fu_64_p1 = 16'd103;

assign p_cast_cast_fu_143_p1 = $signed(trunc_ln818_s_reg_209);

assign r_V_303_fu_63_p0 = r_V_303_fu_63_p00;

assign r_V_303_fu_63_p00 = p_read25_reg_189_pp0_iter1_reg;

assign r_V_303_fu_63_p1 = 18'd262002;

assign r_V_fu_62_p0 = r_V_fu_62_p00;

assign r_V_fu_62_p00 = p_read14_reg_194;

assign r_V_fu_62_p1 = 17'd130965;

assign sext_ln813_323_fu_179_p1 = $signed(add_ln813_662_fu_173_p2);

assign sext_ln813_fu_160_p1 = $signed(trunc_ln_fu_150_p4);

assign trunc_ln_fu_150_p4 = {{r_V_303_fu_63_p2[17:5]}};

assign zext_ln813_fu_169_p1 = add_ln813_fu_164_p2;

endmodule //btag_nn_dense_latency_ap_ufixed_9_0_0_0_0_ap_fixed_16_6_5_3_0_config15_s
